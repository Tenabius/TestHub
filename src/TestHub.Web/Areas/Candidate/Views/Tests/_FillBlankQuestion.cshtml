@using System.Text.RegularExpressions;
@model FillBlankQuestionViewModel

<div class="row">
    @Model.Directions
</div>
<div class="row">
    <div id="FillBlank-@Model.Id" class="col">
        @{
            if (Model.Context is { } context)
            {
                var regEx = FillBlankQuestion.BlankTag;
                var substrings = regEx.Split(context).ToList();
                substrings.RemoveAll(x => x == "");
                int j = 0;
                foreach (string substring in substrings)
                {
                    if (regEx.IsMatch(substring))
                    {
                        <div class="dynamic-lenght-input-container">
                            <span class="dynamic-lenght-input-span">
                            </span>
                            <input type="text"
                                   class="dynamic-lenght-input"
                                   name="[@ViewData["QuestionIndex"]].Blanks[@j].SubmittedAnswer" />
                        </div>
                        j++;
                    }
                    else
                    {
                        @substring
                    }
                }
            }
        }
    </div>
</div>

<script>
    (function () {
        document.querySelector("input[class*='input25']")
        var input = document.querySelector("input[class*='input25']"); // get the input element
        input.addEventListener('input', resizeInput); // bind the "resizeInput" callback on "input" event
        resizeInput.call(input); // immediately call the function

        function resizeInput() {
            var text = document.querySelector("span[class*='text25']");
            console.log(this.value);
            text.innerText = this.value;
        }
    })()
</script>
