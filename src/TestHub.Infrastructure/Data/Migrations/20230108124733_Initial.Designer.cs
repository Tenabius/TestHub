// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestHub.Infrastructure.Data;

#nullable disable

namespace TestHub.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TestHubContext))]
    [Migration("20230108124733_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.AnswerForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerSheetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerSheetId");

                    b.ToTable("Answers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.AnswerSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("EndTestingTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("ResultingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AnswerSheets");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptAllowed")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PassingPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("TimeTesting")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueAnswerForm", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.AnswerForm");

                    b.Property<bool?>("SelectedChoice")
                        .HasColumnType("bit");

                    b.ToTable("FalseTrueAnswerForm");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueQuestion", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.Question");

                    b.Property<bool>("CorrectChoice")
                        .HasColumnType("bit");

                    b.ToTable("FalseTrueQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.AnswerForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.AnswerSheet", null)
                        .WithMany("Answers")
                        .HasForeignKey("AnswerSheetId");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Question", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Test", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueAnswerForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.AnswerForm", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.FalseTrueAnswerForm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueQuestion", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.FalseTrueQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.AnswerSheet", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Test", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
