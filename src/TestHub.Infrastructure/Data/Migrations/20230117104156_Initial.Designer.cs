// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestHub.Infrastructure.Data;

#nullable disable

namespace TestHub.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TestHubContext))]
    [Migration("20230117104156_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestion+Blank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FillBlankQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FillBlankQuestionId");

                    b.ToTable("Blank");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion+Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchingQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchingQuestionId");

                    b.ToTable("Response");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion+Stem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrectResponseId")
                        .HasColumnType("int");

                    b.Property<int>("MatchingQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrectResponseId");

                    b.HasIndex("MatchingQuestionId");

                    b.ToTable("Stem");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion+Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("MultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("Choice");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Directions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.QuestionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TestFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestFormId");

                    b.ToTable("QuestionForm");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptAllowed")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<decimal>("PassingPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.TestForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndTestingTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartTestingTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("TestId");

                    b.ToTable("TestForms");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueQuestion", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.Question");

                    b.Property<bool>("CorrectChoice")
                        .HasColumnType("bit");

                    b.Property<string>("Statment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FalseTrueQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestion", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.Question");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FillBlankQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.Question");

                    b.ToTable("MatchingQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.Question");

                    b.Property<bool>("IsMultipleAnswers")
                        .HasColumnType("bit");

                    b.Property<string>("Stem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueQuestionForm", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.QuestionForm");

                    b.Property<bool?>("SelectedChoice")
                        .HasColumnType("bit");

                    b.ToTable("FalseTrueQuestionForm");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestionForm", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.QuestionForm");

                    b.Property<string>("SubmittedAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FillBlankQuestionForm");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestionFrom", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.QuestionForm");

                    b.Property<string>("SubmittedAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MatchingQuestionFrom");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestionForm", b =>
                {
                    b.HasBaseType("TestHub.ApplicationCore.Entities.QuestionForm");

                    b.Property<string>("SelectedChoicesId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MultipleChoiceQuestionForm");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestion+Blank", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.FillBlankQuestion", "FillBlankQuestion")
                        .WithMany("Blanks")
                        .HasForeignKey("FillBlankQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FillBlankQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion+Response", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.MatchingQuestion", "MatchingQuestion")
                        .WithMany("Responses")
                        .HasForeignKey("MatchingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchingQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion+Stem", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.MatchingQuestion+Response", "CorrectResponse")
                        .WithMany()
                        .HasForeignKey("CorrectResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestHub.ApplicationCore.Entities.MatchingQuestion", "MatchingQuestion")
                        .WithMany("Stems")
                        .HasForeignKey("MatchingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectResponse");

                    b.Navigation("MatchingQuestion");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion+Choice", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion", null)
                        .WithMany("Choices")
                        .HasForeignKey("MultipleChoiceQuestionId");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Question", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.QuestionForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.TestForm", null)
                        .WithMany("CandidateAnswers")
                        .HasForeignKey("TestFormId");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Test", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.TestForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.User", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestHub.ApplicationCore.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueQuestion", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.FalseTrueQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestion", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.FillBlankQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.MatchingQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.Question", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FalseTrueQuestionForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.QuestionForm", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.FalseTrueQuestionForm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestionForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.QuestionForm", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.FillBlankQuestionForm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestionFrom", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.QuestionForm", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.MatchingQuestionFrom", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestionForm", b =>
                {
                    b.HasOne("TestHub.ApplicationCore.Entities.QuestionForm", null)
                        .WithOne()
                        .HasForeignKey("TestHub.ApplicationCore.Entities.MultipleChoiceQuestionForm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.Test", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.TestForm", b =>
                {
                    b.Navigation("CandidateAnswers");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.FillBlankQuestion", b =>
                {
                    b.Navigation("Blanks");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MatchingQuestion", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Stems");
                });

            modelBuilder.Entity("TestHub.ApplicationCore.Entities.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("Choices");
                });
#pragma warning restore 612, 618
        }
    }
}
